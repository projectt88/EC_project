library(shiny)
library(shinythemes)
library(RCurl)
library(plotly)
library(shinydashboard)
library(data.table)
library(ggplot2)
library(GGally)
library(reshape2)
library(plotly)
library(reactable)
library(ggpubr)
library(gghalves)
library(markdown)
setwd("/media/hoangnguyen/d1t/data/Document/Shinyapp_EC")
dir()
## import data
train <- read.csv("train.csv")
View(train)
dim(train)
library(nnet)
library(readr)
install.packages("nnet")
install.packages("nnet")
install.packages("readr")
View(train)
# create model
source("model.R")
model
dir()
test <- read.csv("test.csv")
View(test)
## Predict
Predict <- predict(model, test)
## Predict
Predict <- predict(model, test, type="prob")
View(Predict)
## Predict
Predict <- as.data.frame(predict(model, test, type="prob"))
head(Predict)
Predict$Prediction <- names(Predict)[1:4][apply(Predict[,1:4], 1, which.max)]
head(Predict)
new_data <-Predict %>% mutate(highest_degree = pmax(UCEC_CN_HIGH, UCEC_CN_LOW, UCEC_MSI, UCEC_POLE,na.rm = TRUE))
new_data
dim(new_data)
## make data for plot
new_data$number <- seq(1,nrow(new_data),1)
h <- rep(new_data$predict,each=4)
h
h <- rep(new_data$Predict,each=4)
h
new_data
h <- rep(paste0(seq(1,nrow(new_data),1),"_", new_data$Prediction),each=4)
h
c <- t(new_data[,c(1:4)])
c
mc <- melt(c)
mc
head(mc)
dotplot1 <- as.data.frame(cbind(mc,h))
dotplot1 <- dotplot1[,-2]
head(dotplot1)
mc <- melt(c)
dotplot1 <- as.data.frame(cbind(mc,h))
dotplot1 <- dotplot1[,-2]
head(dotplot1)
dotplot1
mc <- melt(c)
mc
dotplot1 <- as.data.frame(cbind(mc,h))
dotplot1 <- dotplot1[,-2]
head(dotplot1)
colnames(dotplot1) <- c("Score_of_Classes", "Scores", "Predict")
head(dotplot1)
Predict
samples <- paste0(seq(1,nrow(new_data),1),"_", Predict$Prediction)
samples
head(dotplot1)
dotplot1$Predict<- factor(dotplot1$Predict,levels=samples)
plot_ly(
data = dotplot1,
x = ~Predict,
y = ~Scores,
marker = list(size = 10),
type = "scatter",
mode = "markers",
color = ~Score_of_Classes
)%>%
layout(barmode="overlay",
title = "Cabiration Scores Plot",
xaxis = list(tickangle = 90),
legend = list(orientation = "h",
xanchor = "center",
x = 0.5, y=- 0.4))
plot_ly(
data = dotplot1,
x = ~Predict,
y = ~Scores,
marker = list(size = 10),
type = "scatter",
mode = "markers",
color = ~Score_of_Classes
)%>%
layout(barmode="overlay",
title = "Probaility of each class",
xaxis = list(tickangle = 90),
legend = list(orientation = "h",
xanchor = "center",
x = 0.5, y=- 0.4))
head(new_data)
datatable(
l
""
datatable(
new_data [,1:5],
caption = htmltools::tags$caption( style = 'caption-side: top; text-align: center; color:black;  font-size:150% ;','Scores in details and prediction'),
options = list(
scrollX = TRUE,
scrollY = "250px"
)
''
datatable(
new_data [,1:5],
caption = htmltools::tags$caption( style = 'caption-side: top; text-align: center; color:black;  font-size:150% ;','Scores in details and prediction'),
options = list(
scrollX = TRUE,
scrollY = "250px"
)
;
datatable(
new_data [,1:5],
caption = htmltools::tags$caption( style = 'caption-side: top; text-align: center; color:black;  font-size:150% ;','Scores in details and prediction'),
options = list(
scrollX = TRUE,
scrollY = "250px"))
library(DT)
datatable(
new_data [,1:5],
caption = htmltools::tags$caption( style = 'caption-side: top; text-align: center; color:black;  font-size:150% ;','Scores in details and prediction'),
options = list(
scrollX = TRUE,
scrollY = "250px"))
dim(new_data)
head(new_data)
## Predict and make data.table
Predict <- round(as.data.frame(predict(model, test, type="prob")),4)
Predict$Prediction <- names(Predict)[1:4][apply(Predict[,1:4], 1, which.max)]
new_data <-Predict %>% mutate(highest_degree = pmax(UCEC_CN_HIGH, UCEC_CN_LOW, UCEC_MSI, UCEC_POLE,na.rm = TRUE))
head(new_data)
## make data for plot
new_data$number <- seq(1,nrow(new_data),1)
h <- rep(paste0(seq(1,nrow(new_data),1),"_", new_data$Prediction),each=4)
c <- t(new_data[,c(1:4)])
mc <- melt(c)
dotplot1 <- as.data.frame(cbind(mc,h))
dotplot1 <- dotplot1[,-2]
colnames(dotplot1) <- c("Score_of_Classes", "Scores", "Predict")
samples <- paste0(seq(1,nrow(new_data),1),"_", Predict$Prediction)
dotplot1$Predict<- factor(dotplot1$Predict,levels=samples)
plot_ly(
data = dotplot1,
x = ~Predict,
y = ~Scores,
marker = list(size = 10),
type = "scatter",
mode = "markers",
color = ~Score_of_Classes
)%>%
layout(barmode="overlay",
title = "Probaility of each class",
xaxis = list(tickangle = 90),
legend = list(orientation = "h",
xanchor = "center",
x = 0.5, y=- 0.4))
datatable(
new_data [,1:5],
caption = htmltools::tags$caption( style = 'caption-side: top; text-align: center; color:black;  font-size:150% ;','Scores in details and prediction'),
options = list(
scrollX = TRUE,
scrollY = "250px"))
dotplot1$Predict<- factor(dotplot1$Predict,levels=samples)
runApp('shinny1.R')
setwd("/media/hoangnguyen/d1t/data/Document/Shinyapp_EC")
## import data
train <- read.csv("train.csv")
test <- read.csv("test.csv")
dim(test)
dim(train)
table(colnames(test)==colnames(train))
runApp('shinny1.R')
View(train)
View(test)
runApp('shinny1.R')
model
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
?navbarPage
?bs_theme
?sidebarPanel
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
?dom
??dom
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
setwd("/media/hoangnguyen/d1t/data/Document/Shinyapp_EC")
## import data
train <- read.csv("train.csv")
test <- read.csv("test.csv")
## create model
source("model.R")
## Predict and make data.table
Predict <- round(as.data.frame(predict(model, test, type="prob")),4)
Predict$Prediction <- names(Predict)[1:4][apply(Predict[,1:4], 1, which.max)]
new_data <-Predict %>% mutate(highest_degree = pmax(UCEC_CN_HIGH, UCEC_CN_LOW, UCEC_MSI, UCEC_POLE,na.rm = TRUE))
head(newdata)
head(new_data)
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
?formatStyle
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
View(new_data)
colnames(new_data)
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
brks <- quantile(df, probs = seq(.05, .95, .05), na.rm = TRUE)
brks <- quantile(test1[1:13], probs = seq(.05, .95, .05), na.rm = TRUE)
runApp('shinny1.R')
?datatable
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
library(shiny); runApp('shinny1.R')
source("https://raw.githubusercontent.com/projectt88/EC_project/main/model.R")
test_persion <- read.csv("/media/hoangnguyen/d1t/data/Document/Shinyapp_EC/test.csv")
View(test_persion)
test_persion <- read.csv("/media/hoangnguyen/d1t/data/Document/Shinyapp_EC/test.csv")[1,]
test_persion
setwd("/media/hoangnguyen/d1t/data/Document/Shinyapp_EC")
test_persion <- read.csv("/media/hoangnguyen/d1t/data/Document/Shinyapp_EC/test.csv")[1,]
test_persion <- read.csv("/media/hoangnguyen/d1t/data/Document/Shinyapp_EC/test.csv")[1,-14]
test_persion
write.table(test_persion,"test_persional.csv", sep="\t", col.names=T, row.names = F,  quote=F)
dir()
runApp('shinny1.R')
dir()
as.data.frame(fread("test_persional.csv"))
test <- as.data.frame(fread("test_persional.csv"))
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
Output
predict(model,test)
data = as.data.frame(melt(Output))
data
predict(model,test,type="prob")
Output <- data.frame(round(predict(model,test,type="prob"), 3))
Output
data = as.data.frame(melt(Output))
data
Output <- data.frame(round(predict(model,test,type="prob"), 3))
Output
runApp('shinny1.R')
test <- as.data.frame(fread("test_persional.csv"))
test
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
Output
predict(model,test)
predict(model,test,type="prob")
Output <- round(predict(model,test,type="prob"), 3)
Output <- round(predict(model,test,type="prob"), 3)
Output
Output <- as.data.frame(round(predict(model,test,type="prob"), 3))
Output
Output <- as.data.frame.matrix(round(predict(model,test,type="prob"), 3))
Output
Output <- round(predict(model,test,type="prob"), 3)
class(Output)
Output <- as.matrix(round(predict(model,test,type="prob"), 3))
Output
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
Output
Output <- data.frame(round(predict(model,test,type="prob"), 3))
Output
Output <-round(predict(model,test,type="prob"), 3)
Output
Output <-matrix(round(predict(model,test,type="prob"), 3))
Output
Output <-data.frame(Prediction=predict(model,test), Prob=round(predict(model,test,type="prob"), 3))
Output
data = as.data.frame(melt(Output))
data
Output$subtye <- rownames(Output)
data = as.data.frame(melt(Output))
data
Output$Subtye <- rownames(Output)
data = as.data.frame(melt(Output))
data
Output <-data.frame(Prediction=predict(model,test), Prob=round(predict(model,test,type="prob"), 3))
Output$Subtye <- rownames(Output)
data = as.data.frame(melt(Output))
data
data = as.data.frame(melt(Output))[-3]
data
colnames(data) = c("Prediction", "Subtypes", "Probability")
data
plot_ly(
data = data,
x = ~ Subtypes,
y = ~ Probability,
type = 'bar',
color = ~ Subtypes
)
runApp('shinny1.R')
runApp('shinny1.R')
Prob=round(predict(model,test,type="prob"), 3))
round(predict(model,test,type="prob"), 3)
data.frame(round(predict(model,test,type="prob"), 3))
t(data.frame(round(predict(model,test,type="prob"), 3)))
t(data.frame(Pro=round(predict(model,test,type="prob"), 3)))
Probe <- t(data.frame(Pro=round(predict(model,test,type="prob"), 3)))
Output <-data.frame(Prediction=predict(model,test),
;
Output <-data.frame(Prediction=predict(model,test)
l
Output <-data.frame(Prediction=predict(model,test))
Output
Output <-data.frame(Prediction=predict(model,test) ,t(data.frame(Pro=round(predict(model,test,type="prob"), 3))))
Output
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
library(shiny); runApp('shinny1.R')
library(shiny); runApp('shinny1.R')
library(shiny)
library(data.table)
library(dplyr)
library(stats)
library(ggpubr)
library(caret)
library(precrec)
library(readxl)
library(EnvStats)
library(plotly)
library(shinydashboard)
library(shinythemes)
library(RCurl)
library(randomForest)
library(fastDummies)
library(ggplot2)
library(multiROC)
library(pROC)
library(GGally)
library(reshape2)
library(DT)
library(reactable)
library(gghalves)
library(markdown)
library(shinyjs)
install.packages("shinyjs")
library(shinyjs)
runApp('shinny1.R')
runApp('shinny1.R')
runApp('shinny1.R')
library(shiny)
library(data.table)
library(dplyr)
library(stats)
library(ggpubr)
library(caret)
library(precrec)
library(readxl)
library(EnvStats)
library(plotly)
library(shinydashboard)
library(shinythemes)
library(RCurl)
library(randomForest)
library(fastDummies)
library(ggplot2)
library(multiROC)
library(pROC)
library(GGally)
library(reshape2)
library(DT)
library(reactable)
library(gghalves)
library(markdown)
library(shinyjs)
set.seed(123)
ui <- fluidPage(
useShinyjs(),
theme = shinytheme("cerulean"),
navbarPage(
"COVID-19 Severity Prediction",
tabPanel(
"Guideline",
titlePanel("User guideline"),
div(
includeMarkdown(
"https://github.com/lehieu2307/ShinyAppCovid/raw/main/guildline.md"
),
align = "justify"
))))
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
library(knitr)
ui <- shinyUI(
fluidPage(
uiOutput('markdown')
)
)
server <- function(input, output) {
output$markdown <- renderUI({
HTML(markdown::markdownToHTML(knit('RMarkdownFile.rmd', quiet = TRUE)))
})
}
shinyApp(ui, server)
library(shiny)
library(knitr)
ui <- shinyUI(
fluidPage(
uiOutput('markdown')
)
)
server <- function(input, output) {
output$markdown <- renderUI({
HTML(markdown::markdownToHTML(knit('https://github.com/lehieu2307/ShinyAppCovid/raw/main/guildline.md', quiet = TRUE)))
})
}
shinyApp(ui, server)
library(shiny)
library(data.table)
library(dplyr)
library(stats)
library(ggpubr)
library(caret)
library(precrec)
library(readxl)
library(EnvStats)
library(plotly)
library(shinydashboard)
library(shinythemes)
library(RCurl)
library(randomForest)
library(fastDummies)
library(ggplot2)
library(multiROC)
library(pROC)
library(GGally)
library(reshape2)
library(DT)
library(reactable)
library(gghalves)
library(markdown)
library(shinyjs)
set.seed(123)
ui <- fluidPage(
useShinyjs(),
theme = shinytheme("cerulean"),
navbarPage(
"COVID-19 Severity Prediction",
tabPanel(
"Guideline",
titlePanel("User guideline"),
div(
includeMarkdown(
"https://github.com/lehieu2307/ShinyAppCovid/raw/main/guildline.md"
),
align = "justify"
))))
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
library(markdown)
ui <- fluidPage(
mainPanel(
includeMarkdown("https://raw.githubusercontent.com/lehieu2307/ShinyAppCovid/main/about_covid.md")
)
)
shinyApp(ui, function(input, output, session) {})
